@model AspNetIdentityTry1.Models.ItemsData

@{
    ViewBag.Title = "ShowAllItems";

    List<SelectListItem> userList = new List<SelectListItem>();

    if (Model.ViewInfo.AllUsersName != null)
    {
        userList.Add(new SelectListItem
        {
            Text = "All",
            Value = "All"
        });

        foreach (var userName in Model.ViewInfo.AllUsersName)
        {
            userList.Add(new SelectListItem
            {
                Text = userName,
                Value = userName
            });
        }
    }
      
    List<SelectListItem> orderByList = new List<SelectListItem>();
    orderByList.Add(new SelectListItem
    {
        Text = "Priority",
        Value = "Priority"
    });
    orderByList.Add(new SelectListItem
    {
        Text = "Name",
        Value = "Name"
    });
    orderByList.Add(new SelectListItem
    {
        Text = "Description",
        Value = "Description"
    });
    orderByList.Add(new SelectListItem
    {
        Text = "Status",
        Value = "Status"
    });
    orderByList.Add(new SelectListItem
    {
        Text = "Created",
        Value = "Created"
    });

    List<SelectListItem> orderDirection = new List<SelectListItem>();
    orderDirection.Add(new SelectListItem
    {
        Text = "Descending",
        Value = "desc"
    });
    orderDirection.Add(new SelectListItem
    {
        Text = "Ascending",
        Value = "asc"
    });    
    
}

<h2>All items:</h2>

<div style="float: right">
    <div>
        <form action="/ItemsPriority/ShowAllItems" method="get" class="form-inline">
            <p style="display: inline; font-weight: bolder">Order by:</p>
            @Html.DropDownList("orderBy", orderByList, new { @class = "form-control", style = "width:100px" })
            @Html.DropDownList("orderDirection", orderDirection, new { @class = "form-control", style = "width:130px" })
            <p style="display: inline; font-weight: bolder">Number per page:</p>
            @Html.TextBox("numberPerPage", 20, new { style = "width:50px", @maxlength = "3", @class = "form-control"})
            <p style="display: inline; font-weight: bolder">User:</p>
            <p style="display: inline-block">
                @Html.DropDownList("userName", userList, new { @class = "form-control", style = "max-width:160px" })
            </p>
            <input type="submit" value="Apply" class="btn btn-default" />
        </form>
    </div>
</div>

<p>
    <input type="button" value="Create" class="btn btn-default" onclick="location.href='@Url.Action("CreateItemForUser", "ItemsPriority")'" />
</p>

@* nieudana proba zrobienia na tabelce *@
@*<table>
    <tr>
        <td>
            <div>
                <input type="button" value="Create" class="btn btn-default" onclick="location.href='@Url.Action("CreateItemForUser", "ItemsPriority")'" />
            </div>
        </td>
        <td>
            <div style="float: right">
                <form action="/ItemsPriority/ShowAllItems" method="get" class="form-inline" style="display: inline-block; float: right">
                    <p style="display: inline-block; font-weight: bolder">Order by:</p>
                    @Html.DropDownList("orderBy", orderByList, new { @class = "form-control", style = "width:100px; display: inline-block", })
                    @Html.DropDownList("orderDirection", orderDirection, new { @class = "form-control", style = "width:130px; display: inline-block" })
                    <p style="display: inline-block; font-weight: bolder">Number per page:</p>
                    @Html.TextBox("numberPerPage", 20, new { style = "width:50px; display: inline-block", @maxlength = "3", @class = "form-control" })
                    <p style="display: inline-block; font-weight: bolder">User:</p>
                    <p style="display: inline-block">
                        @Html.DropDownList("userName", userList, new { @class = "form-control", style = "max-width:160px; display: inline-block" })
                    </p>
                    <input type="submit" value="Apply" class="btn btn-default" style="display: inline-block" />
                </form>
            </div>
        </td>
    </tr>
</table>*@

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Priority)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Status)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Items.FirstOrDefault().Created)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Items.FirstOrDefault().UserName)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Items)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
                       
            @switch (item.Priority)
            {
                case AspNetIdentityTry1.Models.Priority.VeryHigh:
                    <td style="color:#ff0000 ;">
                        <b>@Html.DisplayFor(modelItem => item.Priority)</b>
                    </td>
                    break;

                case AspNetIdentityTry1.Models.Priority.High:
                <td style="color:#ff6a00 ;">
                    <b>@Html.DisplayFor(modelItem => item.Priority)</b>
                </td>
                    break;

                case AspNetIdentityTry1.Models.Priority.Medium:
                <td style="color:#ffd800 ;">
                    <b>@Html.DisplayFor(modelItem => item.Priority)</b>
                </td>
                    break;

                case AspNetIdentityTry1.Models.Priority.Low:
                <td style="color:#00ff21 ;">
                    <b>@Html.DisplayFor(modelItem => item.Priority)</b>
                </td>
                    break;

                default:
                <td>
                    <b>@Html.DisplayFor(modelItem => item.Priority)</b>
                </td>
                    break;
            }
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Created)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UserName)
            </td>
            <td>
                @Html.ActionLink("Edit", "EditItem", new { id = item.Id, invokingViewAction = ViewBag.InvokingAction }) |
                @Html.ActionLink("Delete", "DeleteItem", new { id = item.Id })
            </td>
        </tr>
    }

</table>

<!-- CHANGES ADDED TO SUPPORT PAGINATION -->
<div style="font-size: 25px">
    Page:

    @for (int i = 1; i <= Model.ViewInfo.AllPageNumber; i++)
    {
        string sPage = i.ToString();

        if (Model.ViewInfo.Page != null)
        {
            if (Model.ViewInfo.Page == i)
            {
                <b>
                    @Html.ActionLink(sPage + " ", "ShowAllItems", new { page = i, numberPerPage = Model.ViewInfo.NumberPerPage, userName = Model.ViewInfo.UserName, orderBy = Model.ViewInfo.OrderBy, orderDirection = Model.ViewInfo.OrderDirection })
                </b>
            }
            else
            {
                @Html.ActionLink(sPage + " ", "ShowAllItems", new { page = i, numberPerPage = Model.ViewInfo.NumberPerPage, userName = Model.ViewInfo.UserName, orderBy = Model.ViewInfo.OrderBy, orderDirection = Model.ViewInfo.OrderDirection })
            }
        }
        else
        {
            @Html.ActionLink(sPage + " ", "ShowAllItems", new { page = i, numberPerPage = Model.ViewInfo.NumberPerPage, userName = Model.ViewInfo.UserName, orderBy = Model.ViewInfo.OrderBy, orderDirection = Model.ViewInfo.OrderDirection })
        }
    }
</div>
